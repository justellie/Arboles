//Los pseudo-poliedros regulares vienen representados por los puntos de sus esquinas
//En el arbolN estos se comprimen ordenadamente. ¿Como ordenamos puntos en el espacio?
//Siguiendo una comparación x < x; y < y; z < z. De forma parecida a como se ordenan 
//cadenas. De esta forma el problema de si dos pseudo poliedros regulares son iguales
//Se reduce a si dos arbolesN son iguales, debido a que hay una forma única de representarlos. 
//Sin embargo se debe tener en cuenta la particulaidad
//de que el nodo raiz tiene hermanos, que son otros arboles n representando otras coordenadas

func ArbolN::iguales(ArbolN: B): lógico
    var
        Apuntadorr_a NodoN arb1, abr2
        Cola<Apuntador_a NodoN> cola1, cola2
    inicio
        arb1 ← instancia.raiz
        arb2 ← B.raiz
       //Si la cantidad de nodos es distinta, los arboles son distintos. Representan distintos poliedros
        si((instancia.p ≠ B.p))entonces    
            iguales ← falso
        sino                       
            cola1.construir()
            cola2.construir()
            iguales ← verdad //bandera, al principio asumimos que son iguales        
    
            //Encolamos el nivel 0 de cada ArbolN, debido a que tecnicamente son ArbN distintos
            //Si no hacemos este paso y solo encolamos el primer nodo nos saltaremos lo otros sub arboles          
            mientras(arb1 ≠ NULO ∧ arb2 ≠ NULO)hacer
                cola1.encolar(arb1)
                arb1 ← arb1↑.obtHd()
                cola2.encolar(arb2)
                arb2 ← arb2↑.obtHd()
            fmientras
            
            // Si uno no es nulo quiere decir que tienen distinto numero de hermanos
            // En ningun caso ambos pueden ser distinto de NULO sino el bucle anterior sería infinito
            si(arb1 ≠ NULO ∨ arb2 ≠ NULO)entonces  
                iguales ← falso
            sino
                mientras(¬cola1.esVacia() ∧ ¬cola2.esVacia() ∧ iguales)
                    arb1 ← cola1.frente()
                    arb2 ← cola2.frente()
                    cola1.desencolar()
                    cola2.desencolar()
                    si(arb1↑.obtInfo() ≠ arb2↑.obtInfo())entonces
                        iguales ← falso
                    sino // Si son distintos no tiene sentido hacer este bucle interno, solo salimos
                        
                        //Ambos tienen que tener la misma cantidad de hermanos
                        //Si uno se hace nulo y el otro no significa que son distintos
                        arb1 ← arb1↑.obtHi()
                        arb2 ← arb2↑.obtHi()
                        mientras((arb1 ≠ NULO ∧ arb2 ≠ NULO)∧ iguales)hacer
                            cola1.encolar(arb1)
                            arb1 ← arb1↑.obtHd()
                            cola2.encolar(arb2)
                            arb2 ← arb2↑.obtHd()  
                            si(arb1\.obtInfo() ≠  arb2\.obtInfo())entonces
                                iguales <- falso
                            fsi
                        fmientras
                        si(arb1 ≠ NULO ∨ arb2 ≠ NULO) //Si uno de los dos es distinto de nulo no son iguales
                            iguales ← falso
                        fsi    
                fmientras
                si((cola1.esVacia() ∧ ¬cola2.esVacia()) ∨ (¬cola1.esVacia() ∧ cola2.esVacia()))
                    iguales ← falso
                fsi    
        fsi
        retornar iguales
    ffunc 

//Ejercicio 2
//Emulamos el comportamiento de la pila recursiva con una pila real
//el procedimiento recursivo seria
// si(p ≠ nulo)
//      inorden(p.hijoIzq)
//      visitar(p)
//      inorden(p.hijoDer)
//  fsi    

ArbolBin<Elemento>::iterativeInorder() :Lista<Elemento> 
var
    Pila<Apuntador_a NodoArbolBin<Elemento>> recorrido
    Lista<Elemento> lista_recorrido
    Apuntador_a NodoArbolBin<Elemento> p 
inicio
    recorrido.contruir()
    lista_recorrido.contruir()
    p ← instancia.raiz
    mientras (¬recorrido.esVacia() ∨ p ≠ NULO) hacer
            //Nos aseguramos de ir lo más a la izquierda posible
            // si encontramos un puntero nulo es como cuando hacemos una llamada
            //Y encuentra un nodo nulo
            si (p ≠ NULO)entonces
                recorrido.apilar(p)
                p ←p↑.obtHi()
            sino 
                //Si encontramos un nodo nulo
                //significa que llegamos al final del subarbol izquierdo
                //por lo tanto es el momento de visitar el nodo e iterar por el
                //subarbol derecho
                p ← recorrido.tope()
                p ← recorrido.desapilar()
                lista_recorrido.insertar(p↑info())
                p ←p↑.obtHd()
            fsi           
    fmientras  
    retornar(lista_recorrido)
ffunc

Ejercicio 3

//Este es el metodo publico, como se necesitan apuntadores
//se crea otro metodo privado

func ArBin::esZurdo() : lógico
    var
        entero n_nodos
        logico zurdo
    inicio
        n_nodos ← 0
        zurdo ← falso
        esZurdo(instancia.nodoRaiz,n_nodos,zurdo)
        retornar zurdo
    ffunc

proc ArBin::esZurdo(apuntador_a NodoB ptr, entero n_nodos, logico zurdo)
    var
        entero n_nodos_izq, n_nodos_der
        logico zurdo_izq, zurdo_der
    inicio
        si(ptr = NULO) entonces //El arbol es vacio es zurdo
            zurdo ← verdad
            n_nodos ← 1
        sino    
            si(ptr↑.obtHi() = NULO ∧ ptr↑.obtHd() = NULO) entonces //El arbol es hoja, tambien es zurdo
                zurdo = verdad
                n_nodos ← 1
            sino
                //La tecnica es ir desde el final del arbol hacia arriba
                //verificando que los subarboles tambien sean zurdos
                //para ello tomamos en cuenta el numero de nodos de cada subarboles
                //Y comparamos si tieme mas de la mitad en el dubarbol izq
                
                esZurdo(ptr↑.obtHi(),n_nodos_izq,zurdo_izq)
                esZurdo(ptr↑.obtHd(),n_nodos_der,zurdo_der)
                n_nodos ← n_nodos_izq + n_nodos_der + 1
                zurdo ← zurdo_izq ∧ zurdo_der ∧ n_nodos_izq > (n_nodos_der+n_nodos_izq)div(2)        
            fsi
        fsi 
    fproc   
            

ArbolBin<Elemento>::iterativeInorder() :Lista<Elemento> 
var
    Pila<Apuntador_a NodoArbolBin<Elemento>> recorrido
    Lista<Elemento> lista_recorrido
    Apuntador_a NodoArbolBin<Elemento> p 
inicio
    recorrido.contruir()
    lista_recorrido.contruir()
    p ← instancia.raiz
    mientras (¬recorrido.esVacia() v p ≠ NULO) hacer
        
            si (p≠ NULO)entonces
                recorrido.apilar(p)
                p ←p↑.obtHi()


            sino 
                p ← recorrido.tope()
                p ← recorrido.desapilar()
                lista_recorrido.insertar(p↑info())
                p ←p↑.obtHd()

            fsi           
    fmientras  
    retornar(lista_recorrido)
ffunc 